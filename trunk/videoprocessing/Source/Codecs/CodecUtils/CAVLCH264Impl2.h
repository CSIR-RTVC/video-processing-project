/** @file

MODULE				: CAVLCH264Impl2

TAG						: CAVLCH264I2

FILE NAME			: CAVLCH264Impl2.h

DESCRIPTION		: A class to implement a CAVLC codec on the 2-D quantised 
								integer transformed and quantised coeffs of a coded block 
								as defined in the H.264 standard. It implements the 
								IContextAwareRunLevelCodec interface. This 2nd implementation 
                operates on OverlayMem2Dv2 classes and not on the data directly.

LICENSE	: GNU Lesser General Public License

Copyright (c) 2008 - 2013, CSIR
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=========================================================================================
*/
#ifndef _CAVLCH264IMPL2_H
#define _CAVLCH264IMPL2_H

#pragma once

#include "IContextAwareRunLevelCodec.h"
#include "IVlcEncoder.h"
#include "IVlcDecoder.h"
#include "OverlayMem2Dv2.h"

/*
---------------------------------------------------------------------------
	Class definition.
---------------------------------------------------------------------------
*/
class CAVLCH264Impl2 : public IContextAwareRunLevelCodec
{
public:
	CAVLCH264Impl2(void);
	virtual ~CAVLCH264Impl2(void);

/// Interface implementation.
public:
	/** Encode the input to a CAVLC bit stream.
	Encode the input 2-D block of IT coeffs into the output 
	run-level bit stream.
	@param in		:	Input block overlay to encode.
	@param rle	:	Run-level encoded stream.
	@return			: Total num of encoded bits. Negative values for errors.
	*/
	int Encode(void* in, void* stream);

	/** Decode a CAVLC bit stream to the output.
	Decode the input run-level bit stream into the
	output 2-D block of IT coeffs.
	@param stream	:	Run-level stream to decode.
	@param out		:	Output block overlay generated by the decode.
	@return				: Total num of decoded bits. Negative values for errors.
	*/
	int Decode(void* stream, void* out);

	void	SetMode(int mode);
	int		GetMode(void)			{ return(_mode); }

	void	SetParameter(int paramID, int paramVal);
	int		GetParameter(int paramID);

/// Implementation specific methods.
public:
	/// Vlc encoders and decoders are used by (associated with) this class and
	/// are required to be set up before encoding/decoding takes place.

	/** Set vlc encoder/decoder to use.
	@param	vlc	: Vlc encoder reference.
	@return			: None.
	*/
	void SetTokenCoeffVlcEncoder(IVlcEncoder* vlc)	{ _pCoeffTokenVlcEncoder = vlc; }
	void SetTokenCoeffVlcDecoder(IVlcDecoder* vlc)	{ _pCoeffTokenVlcDecoder = vlc; }
	void SetPrefixVlcEncoder(IVlcEncoder* vlc)			{ _pPrefixVlcEncoder = vlc; }
	void SetPrefixVlcDecoder(IVlcDecoder* vlc)			{ _pPrefixVlcDecoder = vlc; }
	void SetTotalZerosVlcEncoder(IVlcEncoder* vlc)	{ _pTotalZerosVlcEncoder = vlc; }
	void SetTotalZerosVlcDecoder(IVlcDecoder* vlc)	{ _pTotalZerosVlcDecoder = vlc; }
	void SetRunBeforeVlcEncoder(IVlcEncoder* vlc)		{ _pRunBeforeVlcEncoder = vlc; }
	void SetRunBeforeVlcDecoder(IVlcDecoder* vlc)		{ _pRunBeforeVlcDecoder = vlc; }

/// Class constants.
protected:
	static const int zigZag8x8PosX[64];
	static const int zigZag8x8PosY[64];
	static const int zigZag4x4PosX[16];
	static const int zigZag4x4PosY[16];
	static const int zigZag2x2PosX[4];
	static const int zigZag2x2PosY[4];

public:
	static const int VLC_SYMBOL_NOT_RECOGNISED	= -1;
	static const int STREAM_ACCESS_DENIED				= -2; ///< Full for write & Empty for read.

	/// Class members.
protected:
	const int*	_zigZagX;			///< Active selection of const arrays.
	const int*	_zigZagY;			///< Active selection of const arrays.
	int					_mode;				///< Active mode.
	int					_maxNumCoeff;	///< Num of coeffs in block e.g. 4x4 = 16.
	int					_numCoeff;		///< After encoding or decoding store the no. of coeff for this block.

	/// Parameters for this class for each param ID.
	int					_numTotNeighborCoeff;	///< VLC table selection is based on total coeffs of neighbors.
	int					_dcSkip;							///< All run length coding must ignore the DC coeff in position zero.

	/// Associated Vlc encoders/decoders.
	IVlcEncoder*	_pCoeffTokenVlcEncoder;
	IVlcDecoder*	_pCoeffTokenVlcDecoder;
	IVlcEncoder*	_pPrefixVlcEncoder;
	IVlcDecoder*	_pPrefixVlcDecoder;
	IVlcEncoder*	_pTotalZerosVlcEncoder;
	IVlcDecoder*	_pTotalZerosVlcDecoder;
	IVlcEncoder*	_pRunBeforeVlcEncoder;
	IVlcDecoder*	_pRunBeforeVlcDecoder;

};// end class CAVLCH264Impl2.

#endif	//_CAVLCH264IMPL2_H
