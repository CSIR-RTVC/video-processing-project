/** @file

MODULE				: IContextAwareRunLevelCodec

TAG						: ICARLC

FILE NAME			: IContextAwareRunLevelCodec.h

DESCRIPTION		: A IContextAwareRunLevelCodec interface as an abstract base 
								class (well, almost) to context-aware run-level implementations
								that promote decoupling from the implementation.

COPYRIGHT			:	(c)CSIR 2007-2009 all rights resevered

LICENSE				: Software License Agreement (BSD License)

RESTRICTIONS	: Redistribution and use in source and binary forms, with or without 
								modification, are permitted provided that the following conditions 
								are met:

								* Redistributions of source code must retain the above copyright notice, 
								this list of conditions and the following disclaimer.
								* Redistributions in binary form must reproduce the above copyright notice, 
								this list of conditions and the following disclaimer in the documentation 
								and/or other materials provided with the distribution.
								* Neither the name of the CSIR nor the names of its contributors may be used 
								to endorse or promote products derived from this software without specific 
								prior written permission.

								THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
								"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
								LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
								A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
								CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
								EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
								PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
								PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
								LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
								NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
								SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

===========================================================================
*/
#ifndef _ICONTEXTAWARERUNLEVELCODEC_H
#define _ICONTEXTAWARERUNLEVELCODEC_H

#pragma once

class IContextAwareRunLevelCodec
{
public:
	virtual ~IContextAwareRunLevelCodec() {}

	/** Encode the input to a run-level bit stream.
	The input and output structs are implementation	specific and therefore
	undefined in the interface.
	@param in			:	Input list to encode.
	@param stream	:	Run-level encoded stream.
	@return				: Implementation specific return code.
	*/
	virtual int Encode(void* in, void* stream) = 0;

	/** Decode a run-level bit stream to the output.
	The input and output structs are implementation specific and therefore
	undefined in the interface.
	@param stream	:	Run-level stream to decode.
	@param out		:	Output list generated by the decode.
	@return				: Implementation specific return code.
	*/
	virtual int Decode(void* stream, void* out) = 0;

	/** Set and get the mode for the implementation.
	Implementations require some flexibility in the interface	to provide extra
	modes of operation that are internal. Most implementations will have empty 
	methods.
	@param mode	: Mode to set.
	@return			: None (Set) or the mode (Get).
	*/
	virtual void	SetMode(int mode) = 0;
	virtual int		GetMode(void) = 0;

	/** Set and get parameters for the implementation.
	Implementations require some flexibility in the interface	to provide extra
	parameters that are internal. Most implementations will have empty methods.
	@param paramID	: Parameter to set/get.
	@param paramVal	: Parameter value.
	@return					: None (Set) or the param value (Get).
	*/
	virtual void	SetParameter(int paramID, int paramVal) = 0;
	virtual int		GetParameter(int paramID) = 0;

public:
	/// Modes available.
	static const int Mode2x2 = 0;
	static const int Mode4x4 = 1;
	static const int Mode8x8 = 2;

	/// Parameter IDs.
	static const int NUM_TOT_NEIGHBOR_COEFF_ID	= 0;
	static const int DC_SKIP_FLAG_ID						= 1;
	static const int NUM_TOT_COEFF_ID						= 2;

};// end class IContextAwareRunLevelCodec.

#endif	//_ICONTEXTAWARERUNLEVELCODEC_H
