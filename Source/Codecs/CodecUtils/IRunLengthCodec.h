/** @file

MODULE						: IRunLengthCodec

TAG								: IRLC

FILE NAME					: IRunLengthCodec.h

DESCRIPTION				: A IRunLengthCodec interface as an abstract base class 
										to run-length implementations that promote decoupling 
										of the implementation. 

REVISION HISTORY	:

COPYRIGHT					:	(c)CSIR 2007-2009 all rights resevered

RESTRICTIONS			: The information/data/code contained within this file is 
										the property of CSIR and is released under the OPEN BSD
										license.
===========================================================================
*/
#ifndef _IRUNLENGTHCODEC_H
#define _IRUNLENGTHCODEC_H

#pragma once

class IRunLengthCodec
{
public:
	virtual ~IRunLengthCodec() {}

	/** Encode the input to a run-length structure.
	The input and output rle struct are implementation
	specific and therefore undefined in the interface.
	@param in		:	Input list to encode.
	@param rle	:	Run-length struct generated by the encode.
	@return			: none.
	*/
	virtual void Encode(void* in, void* rle) = 0;

	/** Decode a run-length struct to the output.
	The input rle struct and output are implementation
	specific and therefore undefined in the interface.
	@param rle	:	Run-length struct to decode.
	@param out	:	Output list generated by the decode.
	@return			: none.
	*/
	virtual void Decode(void* rle, void* out) = 0;

	/** Set and get the mode for the implementation.
	Implementations require some flexibility in the interface
	to provide extra modes of operation that are internal. Most
	implementations will have empty methods.
	@param mode	: Mode to set.
	@return			: None (Set) or the mode (Get).
	*/
	virtual void SetMode(int mode) = 0;
	virtual int GetMode(void) = 0;

};// end class IRunLengthCodec.

#endif	//_IRUNLENGTHCODEC_H
